// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package TCP

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransmitDataClient is the client API for TransmitData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitDataClient interface {
	SendHandshake(ctx context.Context, in *ClientHandshake, opts ...grpc.CallOption) (*ServerHandshake, error)
	SendData(ctx context.Context, in *ClientData, opts ...grpc.CallOption) (*ServerHandshake, error)
}

type transmitDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitDataClient(cc grpc.ClientConnInterface) TransmitDataClient {
	return &transmitDataClient{cc}
}

func (c *transmitDataClient) SendHandshake(ctx context.Context, in *ClientHandshake, opts ...grpc.CallOption) (*ServerHandshake, error) {
	out := new(ServerHandshake)
	err := c.cc.Invoke(ctx, "/TCP.transmitData/sendHandshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitDataClient) SendData(ctx context.Context, in *ClientData, opts ...grpc.CallOption) (*ServerHandshake, error) {
	out := new(ServerHandshake)
	err := c.cc.Invoke(ctx, "/TCP.transmitData/sendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmitDataServer is the server API for TransmitData service.
// All implementations must embed UnimplementedTransmitDataServer
// for forward compatibility
type TransmitDataServer interface {
	SendHandshake(context.Context, *ClientHandshake) (*ServerHandshake, error)
	SendData(context.Context, *ClientData) (*ServerHandshake, error)
	mustEmbedUnimplementedTransmitDataServer()
}

// UnimplementedTransmitDataServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitDataServer struct {
}

func (UnimplementedTransmitDataServer) SendHandshake(context.Context, *ClientHandshake) (*ServerHandshake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHandshake not implemented")
}
func (UnimplementedTransmitDataServer) SendData(context.Context, *ClientData) (*ServerHandshake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedTransmitDataServer) mustEmbedUnimplementedTransmitDataServer() {}

// UnsafeTransmitDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitDataServer will
// result in compilation errors.
type UnsafeTransmitDataServer interface {
	mustEmbedUnimplementedTransmitDataServer()
}

func RegisterTransmitDataServer(s grpc.ServiceRegistrar, srv TransmitDataServer) {
	s.RegisterService(&TransmitData_ServiceDesc, srv)
}

func _TransmitData_SendHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHandshake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitDataServer).SendHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TCP.transmitData/sendHandshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitDataServer).SendHandshake(ctx, req.(*ClientHandshake))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitData_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitDataServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TCP.transmitData/sendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitDataServer).SendData(ctx, req.(*ClientData))
	}
	return interceptor(ctx, in, info, handler)
}

// TransmitData_ServiceDesc is the grpc.ServiceDesc for TransmitData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmitData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TCP.transmitData",
	HandlerType: (*TransmitDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendHandshake",
			Handler:    _TransmitData_SendHandshake_Handler,
		},
		{
			MethodName: "sendData",
			Handler:    _TransmitData_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TCP/TCP.proto",
}
